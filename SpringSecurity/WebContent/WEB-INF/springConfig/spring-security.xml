<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 기본적으로 beans 네임스페이스를 기본으로 사용하면 beans앞에 beans를 선언하지 않고, security 엘리먼트 
		사용시 security를 선언하면 되지만, 스프링 시큐리티에서는 security를 기본 네임스페이스로 정의하고 security 접두어를 
		생략하는 방식이 더 좋단다. -->

	<!-- DB 연결 : JNDI 방식 -->
	<beans:bean id="dataSource" 	class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myora" />
	</beans:bean>


	<!-- RoleVoter : 리소스에 설정된 Role과 부합하는 접근권한 Role이 사용자에게 부여되어 있는지 확인한다. Role 
		명칭들은 기본적으로 Role_로 시작하지만 이를 변경 예) access에 Role_User, Role_Admin, Role_Anonymouse 
		에서 Role_을 선언하지 않아도 됨 -->

	<beans:bean id="roleVoter" 	class="org.springframework.security.access.vote.RoleVoter">
		<beans:property name="rolePrefix" value="" />
	</beans:bean>

	<!-- AccessDecisionManager는 FilterSecurityInterceptor로부터 권한 부여 처리를 위임함으로써 
		접근 제어 결정을 쉽게 해준다. -->
	<beans:bean id="accessDecisionManager" 	class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:constructor-arg name="decisionVoters" 		ref="roleVoter" />
	</beans:bean>

	<!-- 스프링 시큐리티 설정 -->
	<http authentication-manager-ref="jdbc-auth" 	access-decision-manager-ref="accessDecisionManager">

		<!-- access에서 Role_User, Role_Admin, Role_Anonymouse 등 선언해야 하지만, 위에서 role_ 	를 선언하지 않아도 되도록 지정 또한 복수개는 콤마(,)로 구분하여 지정 -->
		<!-- <intercept-url pattern="/emp/**" access="Role_Admin" /> -->
		<!-- <intercept-url pattern="/bbsDetail" access="Role_User" /> -->
		<!-- <intercept-url pattern="/bbsForm" access="Role_User" /> -->

		<intercept-url pattern="/emp/**" access="Admin" />
		<intercept-url pattern="/bbsDetail" access="User" />
		<intercept-url pattern="/bbsForm" access="User" />

		<form-login login-page="/login" authentication-failure-url="/denied"
			username-parameter="username" password-parameter="password"
			default-target-url="/home" />
			
		<logout invalidate-session="true" logout-success-url="/login"
			logout-url="/j_spring_security_logout" />
			
		<access-denied-handler error-page="/denied" />
		
		<session-management invalid-session-url="/login">
			<concurrency-control max-sessions="1"
				expired-url="/login" />
		</session-management>
	</http>

	<!-- 이 파일에서 인증할 때 -->
<!-- 	<authentication-manager id="jdbc-auth"> -->
<!-- 		<authentication-provider> -->
<!-- 			<user-service> -->
<!-- 				<user name="javaman" password="1111" authorities="Admin" /> -->
<!-- 			</user-service> -->
<!-- 		</authentication-provider> -->
<!-- 	</authentication-manager> -->


	<!-- DAO 객체를 거치지 않고 DB 인증할 때 -->
	<authentication-manager id="jdbc-auth">
	<authentication-provider>
	<jdbc-user-service data-source-ref="dataSource"
	users-by-username-query="select username,password, enabled from Employees 	where username = ?"
	authorities-by-username-query="select username,role from Roles where 	username = ?" />
	</authentication-provider>
	</authentication-manager>


	<!-- DAO 객체를 통해 인증할 때 : AppUserDetailsServiceDAO 구현 안되어 있음 -->
	<!-- <beans:bean id="userDetailsService" class="proj.security.dao.AppUserDetailsServiceDAO" 
		/> -->
	<!-- <authentication-manager id="dao-auth"> -->
	<!-- <authentication-provider user-service-ref="userDetailsService"> -->
	<!-- </authentication-provider> -->
	<!-- </authentication-manager> -->

</beans:beans>
